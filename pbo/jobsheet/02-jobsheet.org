#+TITLE: Jobsheet 02
#+SUBTITLE: Pengenalan Java
#+AUTHOR: Dian Hanifudin Subhi
#+EMAIL: dhanifudin@gmail.com
#+LANGUAGE: id

#+OPTIONS: html-link-use-abs-url:nil html-postamble:nil html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:t
#+HTML_DOCTYPE: html5
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../assets/css/jobsheet.css"/>
#+HTML_HEAD_EXTRA:<script src="../../assets/js/jobsheet.js"></script>
#+INFOJS_OPT:
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 25.1.1 (<a href="http://orgmode.org">Org</a> mode 9.0.5)
#+LATEX_HEADER:

* Kompetensi
Setelah menempuh pokok bahasan ini, mahasiswa mampu:

1. Mengenal dan memahami karakteristik, platform serta lingkungan pengembangan
   program Java.
2. Memahami secara teknis tahapan pengembangan program di Java.
3. Mengidentifikasi dan menggambarkan class ke dalam class diagram.

* Pendahuluan
** Java
Java merupakan salah satu bahasa pemrograman yang mendukung konsep OOP secara
penuh. Pada awalnya Java dikembangkan oleh Sun Microsystem pada
tahun 1995. Beberapa tokoh yang mengembangkan Java antara lain Patrick Naughton,
Mike Sheridan, James Gosling dan Bill Joy. Mereka memulai pengembangan Java pada
tahun 1991.

Beberapa karakteristik Java diantaranya:
- Secara penuh menerapkan atau mendukung konsep OOP
- Mendukung teknologi jaringan terdistribusi
- Java bersifat sederhana karena menghilangkan konsep Pointer yang mmeungkinkan
  mengakses alamat memori secara langsung. Di Java juga tidak ada
  deconstructor. Proses penghapusan obyek yang sudah tidak lagi digunakan dalam
  program, akan dilakukan secara otomatis oleh GC (Garbage Collector).
- Mendukung beberapa proses yang bisa jalan secara parallel (multithreading)
- Java tidak tergantung pada suatu platform sistem operasi tertentu
  (multiplatform/platform independent). Sekali program Java dikembangkan, maka
  ia bisa dijalankan pada semua sistem operasi, selama di sistem operasi
  tersebut telah mendukung JVM. Konsep ini yang sering juga disebut *Write Once
  Run Anywhere* (WORA).

 #+BEGIN_SRC ditaa :file images/02/platform-dependent.png
                   Ilustrasi proses kompilasi platform dependent
                   +------------+   +------------+   +------------+   +------------+
                   |            |   |            |   |            |   |            |
                   | Windows    |   | Windows    |   | Windows    |   | Windows    |
             +---->| C Compiler |-->| Binary     |-->| Linker     |-->| Executable |
             |     |            |   | {d}        |   |            |   |{d}         |
             |     +------------+   +------------+   +------------+   +------------+
             |
 +------+    |     +------------+   +------------+   +------------+   +------------+
 |      |    |     |            |   |            |   |            |   |            |
 | C    |    |     | Linux      |   | Linux      |   | Linux      |   | Linux      |
 | Code |----+---->| C Compiler |-->| Binary     |-->| Linker     |-->| Executable |
 |   {d}|    |     |            |   | {d}        |   |            |   |{d}         |
 +------+    |     +------------+   +------------+   +------------+   +------------+
             |
             |     +------------+   +------------+   +------------+   +------------+
             |     |            |   |            |   |            |   |            |
             |     | BSD        |   | BSD        |   | BSD        |   | BSD        |
             +---->| C Compiler |-->| Binary     |-->| Linker     |-->| Executable |
                   |            |   | {d}        |   |            |   |{d}         |
                   +------------+   +------------+   +------------+   +------------+

                   +------------+      +-------------+
                   |            |      |             |
                   | Windows    |      | Windows     |
                   | Executable |----->| Workstation |
                   | {d}        |      +-------------+
                   +------------+      +-------------+

                   +------------+      +-------------+
                   |            |      |             |
                   | Linux      |      | Linux       |
                   | Executable |----->| Workstation |
                   | {d}        |      +-------------+
                   +------------+      +-------------+

                   +------------+      +-------------+
                   |            |      |             |
                   | BSD        |      | BSD         |
                   | Executable |----->| Workstation |
                   | {d}        |      +-------------+
                   +------------+      +-------------+
 #+END_SRC

Pada platform dependent, untuk berkas kode akan dikompilasi oleh compiler yang
ada pada sistem operasi masing-masing. Hasil proses kompilasi akan menghasilkan
file executable yang hanya dapat dieksekusi oleh sistem operasi tersebut. Jika
ingin menjalankan pada sistem operasi lain, maka perlu dilakukan kompilasi ulang.

 #+BEGIN_SRC ditaa :file images/02/platform-independent.png
 Ilustrasi kompilasi pada platform independent
+--------------+   +--------------+   +---------------+
| Java         |   | Java         |   | Java          |
| Code         |-->| Compiler     |-->| Bytecode      |
| (.java file) |   |              |   | (.class file) |
| {d}          |   |              |   | {d}           |
+--------------+   +--------------+   +---------------+

                                Windows Workstation
                                +--------------+
                                | Java         |
                                | Runtime      |
                     +--------->| Excecution   |
                     |          | Runtime      |
                     |          +--------------+
                     |          +--------------+
                     |
                     |          Linux Workstation
+---------------+    |          +--------------+
| Java          |    |          | Java         |
| Code          |    |          | Runtime      |
| (.class file) |----+--------->| Excecution   |
| {d}           |    |          | Runtime      |
+---------------+    |          +--------------+
                     |          +--------------+
                     |
                     |          BSD Workstation
                     |          +--------------+
                     |          | Java         |
                     |          | Runtime      |
                     +--------->| Excecution   |
                                | Runtime      |
                                +--------------+
                                +--------------+
 #+END_SRC

Sedangkan pada platform independent (Java), proses kompilasi dilakukan hanya
sekali. Proses kompilasi menghasilkan file java bytecode (.class) yang dapat
dieksekusi pada semua platform (dengan syarat sudah terinstall JRE). Tidak perlu
dilakukan kompilasi ulang untuk mengeksekusi pada sistem operasi yang berbeda.

Java memiliki beberapa grup teknologi diantaranya:
- *Java Standard Edition* (J2SE) untuk pengembangan aplikasi desktop.
- *Java Enterprise Edition* (J2EE) untuk pengembangan aplikasi enterprise.
- *Java Micro Edition* (J2ME) untuk pengembangan aplikasi mobile.
- *Java Smartcard*

Alur pengembangan program Java ditunjukkan pada Gambar berikut:

#+BEGIN_SRC ditaa :file images/02/alur-java.png
+----------------+    +----------+    +-----------------+   +---------+   +---------+
|                |    |          |    |                 |   |         |   |         |
| MyProgram.java |--->| Compiler |--->| MyProgram.class |-->| Java VM |-->| Program |
|            {d} |    |          |    |            {d}  |   |     {o} |   |         |
+----------------+    +----------+    +-----------------+   +---------+   +---------+
#+END_SRC

Kode program Java pertama kali ditulis dalam file teks dengan ekstensi
.java. Setelah itu file .java di-compile oleh Java Compiler. Dari hasil
kompilasi ini diperoleh file .class yang berisi Java Bytecode. Java VM
selanjutnya akan menerjemahkan file .class tersebut sehingga program tersebut
bisa dijalankan. Java VM tersedia untuk berbagai macam sistem operasi. Oleh
karena itu, file .class yang sama akan mampu dijalankan di berbagai sistem operasi.

** UML
UML (Unified Modelling Language) merupakan bahasa standar yang digunakan
untuk menentukan, menggambarkan, membangun dan mendokumentasikan artefak dari
sistem perangkat lunak. UML dibuat oleh Object Management Group dan rancangan
spesifikasi UML 1.0 diusulkan pada tahun 1997. UML terdiri dari beberapa
diagram, antara lain: Use Case Diagram, Activity Diagram, Sequence Diagram,
Class Diagram, Component Diagram serta Deployment Diagram. Dalam pembahasan ini
hanya difokuskan pada Class Diagram.

Class diagram menggambarkan atribut-atribut dan operasi-operasi
(method/behavior) suatu class pada sebuah sistem. Class diagram secara luas
digunakan dalam pemodelan sistem berorientasi objek karena merupakan diagram UML
yang dapat memetakan secara langsung dengan bahasa berorientasi objek.

#+BEGIN_SRC plantuml :file images/02/plantuml-mahasiswa.png
@startuml
skinparam classAttributeIconSize 0
class Mahasiswa {
  +nim:String
  +nama:String
  +belajar():void
}
@enduml
#+END_SRC

Pada contoh class diagram sederhana di atas, terdapat class Mahasiswa yang
mempunyai atribut-atribut *nim* dan *nama* serta mempunyai method
*belajar()*. Atribut menyimpan sebuah informasi atau state. Sedangkan method
menggambarkan tingkah laku dari sebuah class. Setiap atribut maupun method
mempunyai visibility (access modifier), pembahasan mengenai hal ini lebih lanjut
akan dijelaskan pada materi enkapsulasi.

* Percobaan
** Instalasi JDK (Java Development Kit)

*Prosedur Percobaan*

- Download installer Java Development Kit (JDK) pada alamat [[http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html][ini]].
- Pilih *Accept License Agreement* kemudian pilih JDK berdasarkan sistem operasi
  yang digunakan. (Catatan: untuk sistem operasi berbasis UNIX, sebaiknya
  cara instalasi menggunakan *package manager* yang tersedia, contoh: apt, yum
  atau homebrew).
- Setelah file installer selesai diunduh, kemudian jalankan serta ikuti
  instruksi proses instalasinya.
- Untuk langkah selanjutnya, hanya dikhususkan untuk sistem operasi
  Windows. Pada Windows diperlukan setting *PATH* terlebih dahulu sehingga
  perintah java dapat dikenali.
- Buka *Control Panel* \rightarrow *System* \rightarrow *Advanced System
  Setting* \rightarrow *Environment Variable*. Kemudian cari variable
  *PATH*. Jika belum ada, maka buat variable *PATH* tersebut.
- Jika variable *PATH* sudah ada, dan nilai dari variable tersebut sudah ada,
  maka jangan dihapus nilai sebelumnya. Cukup tambahkan *C:\Program
  Files\Java\jdk<version>\bin* (sebagai pemisah antar nilai digunakan karakter
  *;*). Lokasi nilai JDK yang ditambahkan sesuaikan folder dimana Java terinstall.

- Buka Command Prompt dan ketikkan perintah *javac -version*. Jika perintah
  tersebut dikenali, maka lingkungan sistem operasi windows telah mendukung
  program java. Jika belum dikenali, ada kemungkinan kesalahan dalam memasukkan
  lokasi direktori *bin* pada variable *PATH*.

*Pertanyaan*
1. Jelaskan apa kegunaan memasukkan lokasi folder bin dari Java ke dalam
   variable *PATH*?
2. Selain JDK, ada istilah JRE dan JVM. Jelaskan apa perbedaan dari ketiga
   istilah tersebut!
3. Jelaskan mengapa program Java bersifat Multiplatform?

** Aplikasi Java Sederhana

*Prosedur Percobaan*

- Buka aplikasi text editor (Sublime, Notepad++, Atom atau Notepad) yang telah
  terinstall di komputer anda!
- Buat file baru dengan nama *HelloWorld.java*
- Kemudian tuliskan kode program di bawah ini!
  #+BEGIN_SRC java
  class HelloWorld {
    public static void main(String args[]) {
      System.out.println("Hello World!");
    }
  }
  #+END_SRC
- Simpan, kemudian buka aplikasi *Command Prompt* dan masuk ke lokasi folder
  dimana file *HelloWorld.java* tersimpan.
- Compile *HelloWorld.java* dengan perintah.
  #+BEGIN_SRC sh
  javac HelloWorld.java
  #+END_SRC
- Perhatikan hasil proses kompilasi, jika proses kompilasi berhasil akan muncul
  file baru dengan nama *HelloWorld.class*
- Untuk menjalankan program yang telah dikompilasi, masukkan perintah
  #+BEGIN_SRC sh
    java HelloWorld
  #+END_SRC

*Pertanyaan*

1. Jelaskan apa kegunaan perintah *javac NamaFile.java*? Apa yang dihasilkan
   dari perintah *javac* tersebut?
2. Jelaskan apa kegunaan perintah *java NamaClass*?
3. Apa kegunaan fungsi *main()* pada blok kode Java?
4. Apa kegunaan kata kunci *class* dalam program Java?
5. Apa kegunaan perintah *System.out.println()* dalam program Java?
6. Ambil kesimpulan tentang bagaimana tahapan proses pembuatan program Java
   berdasarkan percobaan tersebut!
** UML (Class Diagram) Sederhana
Untuk membuat *Class Diagram* dapat menggunakan perangkat lunak yang khusus
dirancang untuk membuat UML. Dalam percobaan ini digunakan perangkat lunak
StarUML. Anda dapat menggunakan perangkat lunak lainnya.

*Prosedur Percobaan*

- Unduh installer StarUML pada alamat [[http://staruml.io/download][http://staruml.io/download]].
- Pilih installer sesuai dengan sistem operasi yang anda gunakan.
- Setelah installer tersimpan, jalankan dan ikuti proses instalasi.
- Tampilan utama StarUml terdiri dari beberapa panel
  - *Main*: digunakan untuk meletakkan model sebuah diagram.
  - *Working Diagram*: panel yang menampilkan semua daftar diagram.
  - *Toolbox*: panel yang digunakan untuk menambahkan model serta relasi.
  - *Model Explorer*: panel yang me-list semua model yang terlibat dalam diagram
  - *Editors*: panel yang digunakan untuk mengatur *styles* serta *properties*
    dari model.
  - *Minimap*: panel yang menampilkan diagram dalam ukuran mini.

#+ATTR_HTML: :width 80%
[[./images/02/staruml-ui.png]]

- Untuk menambahkan class baru, pada *Model Explorer* klik kanan *Model*
  \rightarrow *Add* \rightarrow *Class* atau gunakan panel *Toolbox*

#+ATTR_HTML: :width 250px
[[./images/02/add-class.png]]

- Ubah nama class menjadi *Mahasiswa* pada panel *Editors* \rightarrow
  *Properties*.

  #+HTML: <div class="notice notice-info">
  Nama class diawali dengan huruf kapital, jika lebih dari satu kata setiap awal
  kata menggunakan huruf besar (aturan seperti ini dikenal dengan istilah CamelCase).
  #+HTML: </div>

#+ATTR_HTML: :width 150px
[[./images/02/class-mahasiswa.png]]

- Kemudian drag class *Mahasiswa* ke dalam Main panel.

[[./images/02/mahasiswa.png]]

- Untuk menambahkan atribut, klik kanan pada model class *Add* \rightarrow
  *Attribute*

#+ATTR_HTML: :width 250px
[[./images/02/add-attribute.png]]

- Set nama atribut menjadi nim pada panel *Editors*

  #+ATTR_HTML: <div class="notice notice-info">
  Untuk menambahkan tipe data anda dapat menggunakan *type* pada panel *Editors*
  \rightarrow *Properties*

#+ATTR_HTML: :width 250px
[[./images/02/nim-property.png]]

[[./images/02/nim-mahasiswa.png]]

- Ulangi langkah menambahkan atribut untuk atribut nama.

[[./images/02/nama-mahasiswa.png]]

- Untuk menambahkan method pada class, klik kanan pada model class *Add*
  \rightarrow *Operation* (pada StarUML method dinotasikan dengan *Operation*).

#+ATTR_HTML: :width 250px
[[./images/02/add-operation.png]]

- Ubah nama method menjadi belajar pada panel *Editors*

#+ATTR_HTML: :width 250px
[[./images/02/belajar-property.png]]

[[./images/02/belajar-mahasiswa.png]]

- Untuk menyimpan menjadi gambar, gunakan menu *File* \rightarrow *Export Diagram As* \rightarrow *PNG*

  #+HTML: <div class="notice notice-warning">
  Jangan menggunakan *screenshoot* untuk menyimpan menjadi gambar.
  #+HTML: </div>

*Pertanyaan*

1. Apa yang membedakan antara atribut dengan method?
2. Buatlah *Class Diagram* dari class di bawah ini!
  #+BEGIN_SRC plantuml :file images/02/class.png
  @startuml
  skinparam classAttributeIconSize 0
  class Bayi {
    -nama:String
    -jenisKelamin:String
    +umur:int
    +menangis():void
    +setUmur(int umur):void
    +getUmur():int
  }
  @enduml
  #+END_SRC
3. Pada tabel di bawah ini, terdapat nama-nama class, atribut dan
  method. Dari tabel tersebut, pilah class, atribut dan method kemudian
  gambarkan ke dalam *Class Diagram*!
  |------------+--------+------------+----------|
  | belang     | nama   | DVD player | play     |
  | dosen      | lagu   | mengeong   | mengajar |
  | warna bulu | kucing | pause      | nip      |

* Tugas

1. Modifikasi program di bawah ini, sehingga memunculkan nim serta nama anda!

  #+BEGIN_SRC java
  class Mahasiswa {
    private String nim;
    private String nama;

    public Mahasiswa() {
    }

    public void setNim(String nim) {
      this.nim = nim;
    }

    public String getNim() {
      return nim;
    }

    public void setNama(String nama) {
      this.nama = nama;
    }

    public String getNama() {
      return nama;
    }

    public static void main(String args[]) {
      Mahasiswa mahasiswa = new Mahasiswa();
      mahasiswa.setNim("1234567890");
      System.out.println(mahasiswa.getNim());
    }
  }
  #+END_SRC

2. Rancanglah sebuah class, tuliskan atribut dan method kemudian gambarkan dalam
   sebuah class diagram!
3. Kumpulkan semua percobaan serta tugas kepada Dosen Pengajar!
